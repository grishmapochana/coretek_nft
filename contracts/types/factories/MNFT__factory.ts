/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { MNFT, MNFTInterface } from "../MNFT";

const _abi = [
  {
    type: "constructor",
    payable: false,
    inputs: [
      {
        type: "address",
        name: "_marketplaceAddress",
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "Approval",
    inputs: [
      {
        type: "address",
        name: "owner",
        indexed: true,
      },
      {
        type: "address",
        name: "approved",
        indexed: true,
      },
      {
        type: "uint256",
        name: "tokenId",
        indexed: true,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "ApprovalForAll",
    inputs: [
      {
        type: "address",
        name: "owner",
        indexed: true,
      },
      {
        type: "address",
        name: "operator",
        indexed: true,
      },
      {
        type: "bool",
        name: "approved",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "TokenMinted",
    inputs: [
      {
        type: "uint256",
        name: "tokenId",
        indexed: true,
      },
      {
        type: "string",
        name: "tokenURI",
        indexed: false,
      },
      {
        type: "address",
        name: "marketplaceAddress",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "Transfer",
    inputs: [
      {
        type: "address",
        name: "from",
        indexed: true,
      },
      {
        type: "address",
        name: "to",
        indexed: true,
      },
      {
        type: "uint256",
        name: "tokenId",
        indexed: true,
      },
    ],
  },
  {
    type: "function",
    name: "approve",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "address",
        name: "to",
      },
      {
        type: "uint256",
        name: "tokenId",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "balanceOf",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "address",
        name: "owner",
      },
    ],
    outputs: [
      {
        type: "uint256",
      },
    ],
  },
  {
    type: "function",
    name: "getAllTokenInfos",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [],
    outputs: [
      {
        type: "tuple[]",
        components: [
          {
            type: "uint256",
            name: "tokenId",
          },
          {
            type: "address",
            name: "owner",
          },
        ],
      },
    ],
  },
  {
    type: "function",
    name: "getAllTokenInfosOwnedBy",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "address",
        name: "addr",
      },
    ],
    outputs: [
      {
        type: "tuple[]",
        components: [
          {
            type: "uint256",
            name: "tokenId",
          },
          {
            type: "address",
            name: "owner",
          },
        ],
      },
    ],
  },
  {
    type: "function",
    name: "getAllTokenInfosOwnedByMe",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [],
    outputs: [
      {
        type: "tuple[]",
        components: [
          {
            type: "uint256",
            name: "tokenId",
          },
          {
            type: "address",
            name: "owner",
          },
        ],
      },
    ],
  },
  {
    type: "function",
    name: "getAllTokens",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [],
    outputs: [
      {
        type: "uint256[]",
      },
    ],
  },
  {
    type: "function",
    name: "getAllTokensOwnedBy",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "address",
        name: "addr",
      },
    ],
    outputs: [
      {
        type: "uint256[]",
      },
    ],
  },
  {
    type: "function",
    name: "getApproved",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "uint256",
        name: "tokenId",
      },
    ],
    outputs: [
      {
        type: "address",
      },
    ],
  },
  {
    type: "function",
    name: "getLatestToken",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [],
    outputs: [
      {
        type: "uint256",
      },
    ],
  },
  {
    type: "function",
    name: "getTokenCreatorById",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "uint256",
        name: "tokenId",
      },
    ],
    outputs: [
      {
        type: "address",
      },
    ],
  },
  {
    type: "function",
    name: "getTokensCreatedByMe",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [],
    outputs: [
      {
        type: "uint256[]",
      },
    ],
  },
  {
    type: "function",
    name: "getTokensOwnedByMe",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [],
    outputs: [
      {
        type: "uint256[]",
      },
    ],
  },
  {
    type: "function",
    name: "isApprovedForAll",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "address",
        name: "owner",
      },
      {
        type: "address",
        name: "operator",
      },
    ],
    outputs: [
      {
        type: "bool",
      },
    ],
  },
  {
    type: "function",
    name: "mintToken",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "string",
        name: "tokenURI",
      },
    ],
    outputs: [
      {
        type: "uint256",
      },
    ],
  },
  {
    type: "function",
    name: "name",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [],
    outputs: [
      {
        type: "string",
      },
    ],
  },
  {
    type: "function",
    name: "ownerOf",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "uint256",
        name: "tokenId",
      },
    ],
    outputs: [
      {
        type: "address",
      },
    ],
  },
  {
    type: "function",
    name: "safeTransferFrom",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "address",
        name: "from",
      },
      {
        type: "address",
        name: "to",
      },
      {
        type: "uint256",
        name: "tokenId",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "safeTransferFrom",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "address",
        name: "from",
      },
      {
        type: "address",
        name: "to",
      },
      {
        type: "uint256",
        name: "tokenId",
      },
      {
        type: "bytes",
        name: "data",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "setApprovalForAll",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "address",
        name: "operator",
      },
      {
        type: "bool",
        name: "approved",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "supportsInterface",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "bytes4",
        name: "interfaceId",
      },
    ],
    outputs: [
      {
        type: "bool",
      },
    ],
  },
  {
    type: "function",
    name: "symbol",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [],
    outputs: [
      {
        type: "string",
      },
    ],
  },
  {
    type: "function",
    name: "tokenURI",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [
      {
        type: "uint256",
        name: "tokenId",
      },
    ],
    outputs: [
      {
        type: "string",
      },
    ],
  },
  {
    type: "function",
    name: "transferFrom",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "address",
        name: "from",
      },
      {
        type: "address",
        name: "to",
      },
      {
        type: "uint256",
        name: "tokenId",
      },
    ],
    outputs: [],
  },
];

export class MNFT__factory {
  static readonly abi = _abi;
  static createInterface(): MNFTInterface {
    return new utils.Interface(_abi) as MNFTInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MNFT {
    return new Contract(address, _abi, signerOrProvider) as MNFT;
  }
}
